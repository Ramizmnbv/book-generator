<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-F-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Book Data Generator</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f3f4f6; /* Tailwind gray-100 */
        }
        .controls-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
        }
        .table-container {
            max-height: 70vh; /* Limit height to encourage scrolling */
            overflow-y: auto;
        }
        .book-row:hover {
            background-color: #e5e7eb; /* Tailwind gray-200 */
        }
        .book-details {
            background-color: #ffffff; /* Tailwind white */
            border-left: 4px solid #3b82f6; /* Tailwind blue-500 */
        }
        .loader {
            border: 5px solid #f3f3f3; /* Light grey */
            border-top: 5px solid #3498db; /* Blue */
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 20px auto;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        /* Custom scrollbar for better aesthetics if needed */
        .table-container::-webkit-scrollbar {
            width: 8px;
        }
        .table-container::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-radius: 10px;
        }
        .table-container::-webkit-scrollbar-thumb {
            background: #888;
            border-radius: 10px;
        }
        .table-container::-webkit-scrollbar-thumb:hover {
            background: #555;
        }
    </style>
</head>
<body class="p-4 md:p-8">
    <div class="container mx-auto max-w-7xl bg-white p-6 rounded-lg shadow-xl">
        <h1 class="text-3xl font-bold mb-6 text-center text-gray-700">Book Data Generator</h1>

        <div class="controls-grid mb-8 p-4 bg-gray-50 rounded-md shadow">
            <div>
                <label for="locale" class="block text-sm font-medium text-gray-700">Language/Region:</label>
                <select id="locale" name="locale" class="mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                    {% for code, name in available_locales %}
                        <option value="{{ code }}" {% if code == 'en_US' %}selected{% endif %}>{{ name }}</option>
                    {% endfor %}
                </select>
            </div>
            <div>
                <label for="seed" class="block text-sm font-medium text-gray-700">Seed:</label>
                <div class="mt-1 flex rounded-md shadow-sm">
                    <input type="number" name="seed" id="seed" class="focus:ring-indigo-500 focus:border-indigo-500 flex-1 block w-full rounded-none rounded-l-md sm:text-sm border-gray-300 p-2" placeholder="Enter seed or leave blank">
                    <button type="button" id="randomSeedBtn" class="inline-flex items-center px-3 py-2 border border-l-0 border-gray-300 rounded-r-md bg-gray-50 text-gray-500 hover:bg-gray-100 focus:outline-none focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M16.023 9.348h4.992v-.001M2.985 19.644v-4.992m0 0h4.992m-4.993 0 3.181 3.183a8.25 8.25 0 0 0 13.803-3.7M4.031 9.865a8.25 8.25 0 0 1 13.803-3.7l3.181 3.182m0-4.991v4.99" />
                        </svg>
                    </button>
                </div>
            </div>
            <div>
                <label for="avgLikes" class="block text-sm font-medium text-gray-700">Avg. Likes (<span id="avgLikesValue">1.0</span>):</label>
                <input type="range" id="avgLikes" name="avgLikes" min="0" max="10" step="0.1" value="1.0" class="mt-1 block w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer">
            </div>
            <div>
                <label for="avgReviews" class="block text-sm font-medium text-gray-700">Avg. Reviews:</label>
                <input type="number" id="avgReviews" name="avgReviews" step="0.1" min="0" value="1.0" class="mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
            </div>
        </div>
        
        <div id="loader" class="loader hidden"></div>

        <div class="table-container border border-gray-200 rounded-lg shadow">
            <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-50">
                    <tr>
                        <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">#</th>
                        <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ISBN</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Title</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Author(s)</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Publisher</th>
                        <th scope="col" class="px-2 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Likes</th>
                    </tr>
                </thead>
                <tbody id="bookTableBody" class="bg-white divide-y divide-gray-200">
                    <!-- Book rows will be inserted here -->
                </tbody>
            </table>
        </div>
         <div id="scrollLoader" class="loader hidden"></div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const localeSelect = document.getElementById('locale');
            const seedInput = document.getElementById('seed');
            const randomSeedBtn = document.getElementById('randomSeedBtn');
            const avgLikesSlider = document.getElementById('avgLikes');
            const avgLikesValueDisplay = document.getElementById('avgLikesValue');
            const avgReviewsInput = document.getElementById('avgReviews');
            const bookTableBody = document.getElementById('bookTableBody');
            const tableContainer = document.querySelector('.table-container');
            const mainLoader = document.getElementById('loader');
            const scrollLoader = document.getElementById('scrollLoader');

            let currentStartIndex = 0;
            const initialLoadCount = 20;
            const subsequentLoadCount = 10;
            let isLoading = false;kg
            let currentSeed = ''; // Stores the seed used for the current dataset

            function generateRandomSeed() {
                return Math.floor(Math.random() * 10000000) + 1;
            }

            function fetchBooks(startIndex, count, newDataset = false) {
                if (isLoading) return;
                isLoading = true;
                if (newDataset) {
                     mainLoader.classList.remove('hidden');
                } else {
                     scrollLoader.classList.remove('hidden');
                }


                const locale = localeSelect.value;
                let seed = seedInput.value.trim();
                if (newDataset && (seed === '' || isNaN(parseInt(seed)))) { // If new dataset and seed is empty/invalid
                    seed = generateRandomSeed();
                    seedInput.value = seed; // Update input with random seed
                } else if (seed === '' || isNaN(parseInt(seed))) { // For subsequent loads if seed became invalid (should not happen)
                     seed = currentSeed || generateRandomSeed(); // Use current or new random
                }
                currentSeed = seed; // Store the seed being used

                const avgLikes = avgLikesSlider.value;
                const avgReviews = avgReviewsInput.value;

                const params = new URLSearchParams({
                    locale: locale,
                    seed: seed,
                    avgLikes: avgLikes,
                    avgReviews: avgReviews,
                    startIndex: startIndex,
                    count: count
                });

                fetch(`/api/books?${params.toString()}`)
                    .then(response => {
                        if (!response.ok) {
                            // Try to parse error from JSON response
                            return response.json().then(err => { throw new Error(err.error || `HTTP error! status: ${response.status}`) });
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.error) {
                             throw new Error(data.error);   
                        }
                        if (newDataset) {
                            bookTableBody.innerHTML = ''; // Clear for new dataset
                            currentStartIndex = 0;
                             // Update seed input if it was auto-generated on server for first load (controller returns 'nextSeed')
                            if (data.nextSeed && seedInput.value !== data.nextSeed.toString()) {
                                seedInput.value = data.nextSeed;
                                currentSeed = data.nextSeed;
                            }
                        }
                        renderBooks(data.books);
                        currentStartIndex += data.books.length;
                        if (data.books.length < count) { // No more data
                            // Potentially disable further infinite scroll
                        }
                    })
                    .catch(error => {
                        console.error('Error fetching books:', error);
                        bookTableBody.innerHTML = `<tr><td colspan="6" class="text-center text-red-500 p-4">Error loading books: ${error.message}</td></tr>`;
                    })
                    .finally(() => {
                        isLoading = false;
                        mainLoader.classList.add('hidden');
                        scrollLoader.classList.add('hidden');
                    });
            }

            function renderBooks(books) {
                books.forEach(book => {
                    const row = document.createElement('tr');
                    row.classList.add('book-row', 'cursor-pointer');
                    row.innerHTML = `
                        <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-900">${book.index}</td>
                        <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-500">${book.isbn}</td>
                        <td class="px-6 py-3 whitespace-nowrap text-sm text-gray-900 max-w-xs truncate" title="${book.title}">${book.title}</td>
                        <td class="px-6 py-3 whitespace-nowrap text-sm text-gray-500 max-w-xs truncate" title="${book.authors.join(', ')}">${book.authors.join(', ')}</td>
                        <td class="px-6 py-3 whitespace-nowrap text-sm text-gray-500 max-w-xs truncate" title="${book.publisher}">${book.publisher}</td>
                        <td class="px-2 py-3 whitespace-nowrap text-sm text-gray-500 text-center">${book.likes}</td>
                    `;
                    bookTableBody.appendChild(row);

                    const detailsRow = document.createElement('tr');
                    detailsRow.classList.add('book-details-row', 'hidden');
                    detailsRow.innerHTML = `<td colspan="6" class="p-0">
                        <div class="book-details p-4 m-2 rounded-md shadow-inner">
                            <div class="flex flex-col md:flex-row gap-4">
                                <img src="${book.coverImageUrl}" alt="Cover for ${book.title}" class="w-32 h-48 object-cover rounded shadow md:self-start">
                                <div class="flex-grow">
                                    <h3 class="text-xl font-semibold text-gray-800">${book.title}</h3>
                                    <p class="text-md text-gray-600">by ${book.authors.join(', ')}</p>
                                    <p class="text-sm text-gray-500">Published by ${book.publisher}</p>
                                    <p class="text-sm text-gray-500">ISBN: ${book.isbn}</p>
                                    <p class="text-sm text-gray-500 mt-1">Likes: ${book.likes}</p>
                                    
                                    ${book.reviews.length > 0 ? `
                                    <div class="mt-4">
                                        <h4 class="text-lg font-semibold text-gray-700 mb-2">Reviews (${book.reviews.length}):</h4>
                                        <div class="max-h-40 overflow-y-auto space-y-3 pr-2">
                                            ${book.reviews.map(review => `
                                                <div class="p-3 bg-gray-50 rounded-md shadow-sm border border-gray-200">
                                                    <p class="text-sm text-gray-700">"${review.text}"</p>
                                                    <p class="text-xs text-gray-500 text-right mt-1">- ${review.author}</p>
                                                </div>
                                            `).join('')}
                                        </div>
                                    </div>
                                    ` : '<p class="mt-4 text-sm text-gray-500">No reviews for this book.</p>'}
                                </div>
                            </div>
                        </div>
                    </td>`;
                    bookTableBody.appendChild(detailsRow);

                    row.addEventListener('click', () => {
                        detailsRow.classList.toggle('hidden');
                    });
                });
            }

            // Event Listeners for controls
            localeSelect.addEventListener('change', () => fetchBooks(0, initialLoadCount, true));
            seedInput.addEventListener('change', () => fetchBooks(0, initialLoadCount, true));
            avgLikesSlider.addEventListener('input', () => {
                avgLikesValueDisplay.textContent = parseFloat(avgLikesSlider.value).toFixed(1);
            });
            avgLikesSlider.addEventListener('change', () => fetchBooks(0, initialLoadCount, true));
            avgReviewsInput.addEventListener('change', () => fetchBooks(0, initialLoadCount, true));
            
            randomSeedBtn.addEventListener('click', () => {
                seedInput.value = generateRandomSeed();
                fetchBooks(0, initialLoadCount, true);
            });

            // Infinite Scroll
            tableContainer.addEventListener('scroll', () => {
                // Check if scrolled to near bottom:
                // scrollHeight: total height of content
                // scrollTop: current vertical scroll position from top
                // clientHeight: visible height of the container
                if (tableContainer.scrollHeight - tableContainer.scrollTop <= tableContainer.clientHeight + 100) { // 100px threshold
                    if (!isLoading && currentStartIndex > 0) { // Only load more if not initial load state and not already loading
                         fetchBooks(currentStartIndex, subsequentLoadCount, false);
                    }
                }
            });

            // Initial load
            seedInput.value = generateRandomSeed(); // Start with a random seed displayed
            fetchBooks(0, initialLoadCount, true);
        });
    </script>
</body>
</html>
